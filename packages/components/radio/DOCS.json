{
  "Radio": {
    "checked": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the radio will be checked.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "defaultValue": "\"primary\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the radio will be initially checked.",
      "required": false
    },
    "defaultIsChecked": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `defaultChecked` instead.",
      "description": "If `true`, the radio will be initially checked.",
      "required": false
    },
    "iconProps": {
      "type": "HTMLUIProps<\"span\">",
      "description": "Props for icon element.",
      "required": false
    },
    "id": {
      "type": "string",
      "description": "id assigned to input.",
      "required": false
    },
    "inputProps": {
      "type": "InputHTMLAttributes<HTMLInputElement>",
      "description": "Props for input element.",
      "required": false
    },
    "isChecked": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `checked` instead.",
      "description": "If `true`, the radio will be checked.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "label": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "description": "The label of the radio.",
      "required": false
    },
    "labelProps": {
      "type": "HTMLUIProps<\"span\">",
      "description": "Props for label element.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name of the input field in a radio.",
      "required": false
    },
    "onChange": {
      "type": "ChangeEventHandler<HTMLInputElement>",
      "description": "The callback invoked when the checked state changes.",
      "required": false
    },
    "size": {
      "type": "\"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the Radio.",
      "required": false
    },
    "value": {
      "type": "Y",
      "description": "The value to be used in the radio button.",
      "required": false
    },
    "variant": {
      "type": "string",
      "description": "The variant of the Radio.",
      "required": false
    }
  },
  "RadioCard": {
    "addon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "description": "The addon of the radio card.",
      "required": false
    },
    "addonProps": {
      "type": "RadioCardAddonProps",
      "description": "Props for the footer of the radio card.",
      "required": false
    },
    "checked": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the radio will be checked.",
      "required": false
    },
    "colorScheme": {
      "type": "\"blackAlpha\" | \"whiteAlpha\" | \"amber\" | \"blue\" | \"info\" | \"link\" | \"primary\" | \"cyan\" | \"emerald\" | \"flashy\" | \"fuchsia\" | \"gray\" | \"green\" | \"success\" | \"indigo\" | \"lime\" | \"neutral\" | \"orange\" | \"warning\" | \"pink\" | \"purple\" | \"red\" | \"danger\" | \"rose\" | \"sky\" | \"teal\" | \"violet\" | \"secondary\" | \"yellow\"",
      "defaultValue": "\"primary\"",
      "description": "The visual color appearance of the component.",
      "required": false
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the radio will be initially checked.",
      "required": false
    },
    "defaultIsChecked": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `defaultChecked` instead.",
      "description": "If `true`, the radio will be initially checked.",
      "required": false
    },
    "description": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "description": "The body of the radio card.",
      "required": false
    },
    "descriptionProps": {
      "type": "RadioCardDescriptionProps",
      "description": "Props for the description of the radio card.",
      "required": false
    },
    "iconProps": {
      "type": "HTMLUIProps",
      "description": "Props for the icon of the radio card.",
      "required": false
    },
    "id": {
      "type": "string",
      "description": "id assigned to input.",
      "required": false
    },
    "inputProps": {
      "type": "InputHTMLAttributes<HTMLInputElement>",
      "description": "Props for input element.",
      "required": false
    },
    "isChecked": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `checked` instead.",
      "description": "If `true`, the radio will be checked.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "label": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal",
      "description": "The label of the radio card.",
      "required": false
    },
    "labelProps": {
      "type": "RadioCardLabelProps",
      "description": "Props for the label of the radio card.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name of the input field in a radio.",
      "required": false
    },
    "onChange": {
      "type": "ChangeEventHandler<HTMLInputElement>",
      "description": "The callback invoked when the checked state changes.",
      "required": false
    },
    "size": {
      "type": "\"sm\" | \"md\" | \"lg\"",
      "defaultValue": "\"md\"",
      "description": "The size of the RadioCard.",
      "required": false
    },
    "value": {
      "type": "Y",
      "description": "The value to be used in the radio button.",
      "required": false
    },
    "variant": {
      "type": "\"outline\" | \"subtle\" | \"surface\"",
      "defaultValue": "\"outline\"",
      "description": "The variant of the RadioCard.",
      "required": false
    },
    "withIcon": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the icon will be displayed.",
      "required": false
    }
  },
  "RadioCardAddon": {},
  "RadioCardDescription": {},
  "RadioCardGroup": {
    "addonProps": {
      "type": "RadioCardAddonProps",
      "description": "Props for the footer of the radio card.",
      "required": false
    },
    "align": {
      "type": "UIValue<AlignItems>",
      "description": "The CSS `align-items` property.",
      "required": false
    },
    "basis": {
      "type": "UIValue<number | \"content\" | \"px\" | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | ({} & string) | (string & {}) | \"-moz-fit-content\" | ... 69 more ... | \"xs\">",
      "description": "The CSS `flex-basis` property.",
      "required": false
    },
    "defaultValue": {
      "type": "Y",
      "description": "The initial value of the radio group.",
      "required": false
    },
    "descriptionProps": {
      "type": "RadioCardDescriptionProps",
      "description": "Props for the description of the radio card.",
      "required": false
    },
    "direction": {
      "type": "UIValue<FlexDirection>",
      "description": "The CSS `flex-direction` property.",
      "required": false
    },
    "grow": {
      "type": "UIValue<FlexGrow>",
      "description": "The CSS `flex-grow` property.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isNative": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "It will be deprecated in version 2.0.",
      "description": "If `true`, input elements will receive `checked` attribute instead of `isChecked`.\n\nThis assumes, you're using native radio inputs.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "items": {
      "type": "RadioCardItem<Y>[]",
      "defaultValue": "'[]'",
      "description": "If provided, generate radio cards based on items.",
      "required": false
    },
    "justify": {
      "type": "UIValue<JustifyContent>",
      "description": "The CSS `justify-content` property.",
      "required": false
    },
    "labelProps": {
      "type": "RadioCardLabelProps",
      "description": "Props for the label of the radio card.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The HTML `name` attribute used for forms.",
      "required": false
    },
    "onChange": {
      "type": "(value: Y) => void",
      "description": "The callback fired when any children radio is checked or unchecked.",
      "required": false
    },
    "shrink": {
      "type": "UIValue<FlexShrink>",
      "description": "The CSS `flex-shrink` property.",
      "required": false
    },
    "value": {
      "type": "Y",
      "description": "The value of the radio group.",
      "required": false
    },
    "withIcon": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the icon will be displayed.",
      "required": false
    },
    "wrap": {
      "type": "UIValue<FlexWrap>",
      "description": "The CSS `flex-wrap` property.",
      "required": false
    }
  },
  "RadioCardLabel": {
    "contentProps": {
      "type": "HTMLUIProps<\"span\">",
      "description": "The props for the label content.",
      "required": false
    },
    "iconProps": {
      "type": "HTMLUIProps",
      "description": "The props for the icon.",
      "required": false
    },
    "withIcon": {
      "type": "boolean",
      "defaultValue": true,
      "description": "If `true`, the icon will be displayed.",
      "required": false
    }
  },
  "RadioGroup": {
    "align": {
      "type": "UIValue<AlignItems>",
      "description": "The CSS `align-items` property.",
      "required": false
    },
    "basis": {
      "type": "UIValue<number | \"content\" | \"px\" | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | ({} & string) | (string & {}) | \"-moz-fit-content\" | ... 69 more ... | \"xs\">",
      "description": "The CSS `flex-basis` property.",
      "required": false
    },
    "defaultValue": {
      "type": "Y",
      "description": "The initial value of the radio group.",
      "required": false
    },
    "direction": {
      "type": "UIValue<FlexDirection>",
      "description": "The CSS `flex-direction` property.",
      "required": false
    },
    "grow": {
      "type": "UIValue<FlexGrow>",
      "description": "The CSS `flex-grow` property.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isNative": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "It will be deprecated in version 2.0.",
      "description": "If `true`, input elements will receive `checked` attribute instead of `isChecked`.\n\nThis assumes, you're using native radio inputs.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "items": {
      "type": "RadioItem<Y>[]",
      "defaultValue": "'[]'",
      "description": "If provided, generate radios based on items.",
      "required": false
    },
    "justify": {
      "type": "UIValue<JustifyContent>",
      "description": "The CSS `justify-content` property.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The HTML `name` attribute used for forms.",
      "required": false
    },
    "onChange": {
      "type": "(value: Y) => void",
      "description": "The callback fired when any children radio is checked or unchecked.",
      "required": false
    },
    "shrink": {
      "type": "UIValue<FlexShrink>",
      "description": "The CSS `flex-shrink` property.",
      "required": false
    },
    "value": {
      "type": "Y",
      "description": "The value of the radio group.",
      "required": false
    },
    "wrap": {
      "type": "UIValue<FlexWrap>",
      "description": "The CSS `flex-wrap` property.",
      "required": false
    }
  },
  "UseRadio": {
    "checked": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the radio will be checked.",
      "required": false
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the radio will be initially checked.",
      "required": false
    },
    "defaultIsChecked": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `defaultChecked` instead.",
      "description": "If `true`, the radio will be initially checked.",
      "required": false
    },
    "id": {
      "type": "string",
      "description": "id assigned to input.",
      "required": false
    },
    "isChecked": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "Use `checked` instead.",
      "description": "If `true`, the radio will be checked.",
      "required": false
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be disabled.",
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be invalid.",
      "required": false
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be readonly.",
      "required": false
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "description": "If `true`, the form control will be required.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The name of the input field in a radio.",
      "required": false
    },
    "onChange": {
      "type": "ChangeEventHandler<HTMLInputElement>",
      "description": "The callback invoked when the checked state changes.",
      "required": false
    },
    "value": {
      "type": "Y",
      "description": "The value to be used in the radio button.",
      "required": false
    }
  },
  "UseRadioGroup": {
    "defaultValue": {
      "type": "Y",
      "description": "The initial value of the radio group.",
      "required": false
    },
    "id": {
      "type": "string",
      "description": "The top-level id string that will be applied to the radios.\nThe index of the radio will be appended to this top-level id.",
      "required": false
    },
    "isNative": {
      "type": "boolean",
      "defaultValue": false,
      "deprecated": "It will be deprecated in version 2.0.",
      "description": "If `true`, input elements will receive `checked` attribute instead of `isChecked`.\n\nThis assumes, you're using native radio inputs.",
      "required": false
    },
    "name": {
      "type": "string",
      "description": "The HTML `name` attribute used for forms.",
      "required": false
    },
    "onChange": {
      "type": "(value: Y) => void",
      "description": "The callback fired when any children radio is checked or unchecked.",
      "required": false
    },
    "value": {
      "type": "Y",
      "description": "The value of the radio group.",
      "required": false
    }
  }
}
