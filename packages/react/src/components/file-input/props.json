{
  "FileInput": {
    "as": {
      "type": "As",
      "description": "The HTML element to render.",
      "required": false
    },
    "asChild": {
      "type": "boolean",
      "description": "Merges its props onto its immediate child.",
      "required": false
    },
    "css": {
      "type": "CSSObject | CSSObject[]",
      "description": "The CSS object.",
      "required": false
    },
    "colorScheme": {
      "type": "ColorScheme | [ColorScheme | { [x: string & {}]: ColorScheme | undefined; base?: ColorScheme | undefined; \"2xl\"?: ColorScheme | undefined; lg?: ColorScheme | undefined; md?: ColorScheme | undefined; sm?: ColorScheme | undefined; xl?: ColorScheme | undefined; }, ColorScheme | { ...; }] | { ...; }",
      "description": "Set color scheme variables.",
      "required": false
    },
    "size": {
      "type": "AnyString | \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | [AnyString | \"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | { [x: string & {}]: AnyString | \"2xl\" | ... 5 more ... | undefined; ... 5 more ...; xl?: AnyString | ... 6 more ... | undefined; }, AnyString | ... 6 more ... | { ...; }] | { ...; }",
      "description": "The size of the component.",
      "required": false
    },
    "variant": {
      "type": "AnyString | \"outline\" | \"plain\" | \"filled\" | \"flushed\" | [AnyString | \"outline\" | \"plain\" | \"filled\" | \"flushed\" | { [x: string & {}]: AnyString | ... 4 more ... | undefined; ... 5 more ...; xl?: AnyString | ... 4 more ... | undefined; }, AnyString | ... 4 more ... | { ...; }] | { ...; }",
      "description": "The variant of the component.",
      "required": false
    },
    "children": {
      "type": "(files: File[] | undefined) => ReactNode",
      "description": "A callback that returns a React node.",
      "required": false
    },
    "component": {
      "type": "FC<{ index: number; value: File }>",
      "description": "The component that displays uploaded files.",
      "required": false
    },
    "defaultValue": {
      "type": "File[]",
      "description": "The initial value of the file input.",
      "required": false
    },
    "errorBorderColor": {
      "type": "\"link\" | \"amber\" | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | \"amber.950\" | \"amber.bg\" | ... 662 more ... | { ...; }",
      "description": "The border color when the input is invalid.",
      "required": false
    },
    "focusBorderColor": {
      "type": "\"link\" | \"amber\" | \"amber.50\" | \"amber.100\" | \"amber.200\" | \"amber.300\" | \"amber.400\" | \"amber.500\" | \"amber.600\" | \"amber.700\" | \"amber.800\" | \"amber.900\" | \"amber.950\" | \"amber.bg\" | ... 662 more ... | { ...; }",
      "description": "The border color when the input is focused.",
      "required": false
    },
    "format": {
      "type": "(value: File, index: number) => string",
      "description": "A callback that formats the name of the uploaded file.",
      "required": false
    },
    "invalid": {
      "type": "boolean",
      "defaultValue": "false",
      "description": "If `true`, the field will be invalid.",
      "required": false
    },
    "onChange": {
      "type": "(files: File[] | undefined) => void",
      "description": "Function to be called when a file change event occurs.",
      "required": false
    },
    "resetRef": {
      "type": "RefObject<(() => void) | null>",
      "description": "Ref to a reset function.",
      "required": false
    },
    "separator": {
      "type": "string",
      "defaultValue": "\",\"",
      "description": "The string to separate uploaded files.",
      "required": false
    },
    "value": {
      "type": "File[]",
      "description": "The value of the file input.",
      "required": false
    }
  }
}
